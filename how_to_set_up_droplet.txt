$ sudo apt update
$ sudo apt upgrade
$ sudo apt install python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx curl

$ sudo -u postgres psql

-- Postgres --
CREATE DATABASE portfoliodb;
CREATE USER portfoliouser WITH PASSWORD 'django1234';

ALTER ROLE portfoliouser SET client_encoding TO 'utf8';
ALTER ROLE portfoliouser SET default_transaction_isolation TO 'read committed';
ALTER ROLE portfoliouser SET timezone TO 'Asia/Tokyo';

GRANT ALL PRIVILEGES ON DATABASE portfoliodb TO portfoliouser;

\q
-- end Postgres --

// Check connection to portfoliodb
$ sudo -u postgres psql -d portfoliodb

// Copy project to server from local (On Local)
$ scp -r portfolio reisuke@***.***.***.***:/home/reisuke/

// Change access privileges
$ chmod -R 755 portfolio

$ sudo -H pip3 install virtualenv

$ virtualenv venv

// Activate virtual development environment
$ source venv/bin/activate

// gunicor: Web Server Gateway Interface (Http server) for Django , psycopg2: Library for Postgres
$ pip install django gunicorn psycopg2-binary pillow

// Configure settings
$ vim portfolio/portfolio/settings.py

-- settings.py --

ALLOWED_HOSTS = ['***.***.***.***']

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'portfoliodb',
        'USER': 'portfoliouser',
        'PASSWORD': 'django1234',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
-- end settings.py --

// Testing deployment
$ cd portfolio
$ rm -r images

// Migrate
$ python manage.py migrate

// Create super user
$ python manage.py createsuperuser

// Collect static files to /home/reisuke/portfolio/static
$ python manage.py collectstatic

// Allow access via port 8000
$ sudo ufw allow 8000
[sudo] password for reisuke: *****
Rules updated
Rules updated (v6)

// Run server with port 8000
$ python manage.py runserver 0.0.0.0:8000
ACCESS: https://***.***.***.***:8000

// Run by gunicorn
$ gunicorn --bind 0.0.0.0:8000 portfolio.wsgi
Ctrl + c

// Deactivate virtual development environment
$ deactivate

// Edit gunicorn.socket
$ sudo vim /etc/systemd/system/gunicorn.socket
-- gunicorn.socket --
[Unit]
Description=gunicorn socket

[Socket]
ListenStream=/run/gunicorn.sock

[Install]
WantedBy=sockets.target
-- end gunicorn.socket --

// Edit gunicorn.service
$ sudo vim /etc/systemd/system/gunicorn.service
-- gunicorn.service --
[Unit]
Description=gunicorn daemon
Requires=gunicorn.socket
After=network.target

[Service]
User=reisuke
Group=www-data
WorkingDirectory=/home/reisuke/portfolio
ExecStart=/home/reisuke/venv/bin/gunicorn \
          --access-logfile - \
          --workers 3 \
          --bind unix:/run/gunicorn.sock \
          portfolio.wsgi:application

[Install]
WantedBy=multi-user.target
-- end gunicorn.service --

// Start gunicorn
$ sudo systemctl start gunicorn.socket
$ sudo systemctl enable gunicorn.socket

// Check daemon
$ sudo systemctl daemon-reload

// Restart gunicorn
$ sudo systemctl restart gunicorn